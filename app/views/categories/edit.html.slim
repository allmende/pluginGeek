/ categories/edit
.edit-category-container
  / Category details header
  = render 'categories/category_details'

  / Form
  = semantic_form_for @category, class: '' do |f|
    = f.semantic_errors

    / Inputs
    = f.inputs do
      / Name including Languages, e.g. Text Editor Plugins (Web/Mobile)
      - if staff?
        = f.input :full_name, as: :string, label: 'Name and Languages (Staff)', hint: "ActiveRecord: Nested Records (Ruby), Website Analytics (Javascript/Ruby), Table View (iOS)"

      / description for the category that will be rendered in overviews and is searchable
      = f.input :description, label: 'Description / Summary', hint: 'What is the purpose of the listed repos?', placeholder: 'Description: What is the purpose of the listed repos?'

      - if staff?
        = f.input :related_categories, label: 'Related categories (Staff)', collection: Category.all_without(@category), hint: 'Are there any related categories? If you cannot find a relationship that is displayed in the show view here, check on the other side of the force.'

      - if staff?
        / draft status
        = f.input :draft, label: 'Still in draft mode? (Staff)'

    / Submit button
    = f.actions do
      = f.action :submit, as: :button, button_html: {class: 'button', style: 'margin-bottom: 2rem'}

  - if policy(@category).destroy?
    = link_to 'Destroy category', category_path(@category), method: :delete, confirm: 'Are you sure?'


  / descriptions of associated repos, as a guide for writing
  .descriptions-of-repos
    p Here are the descriptions of the associated repos as some inspiration.

    table
      tr
        th Name
        th Score
        th Description
      - for repo in @category.repos
        tr.repo
          td.name = repo.name
          td.score = repo.score
          td.description = repo.description


javascript:
  $('#category_related_category_ids').select2({
    placeholder: "Related categories"
  })
